# Generated by Django 2.2.13 on 2020-08-05 20:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutUsGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125)),
                ('order', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='AboutUsPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=16, null=True)),
                ('headshot', models.ImageField(default='gisday/aboutus/dummy_headshot222.jpg', null=True, upload_to='gisday/aboutus/')),
            ],
        ),
        migrations.CreateModel(
            name='DemographicSurvey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(choices=[('Oklahoma State University', 'Oklahoma State University'), ('Samuel Roberts Noble Foundation', 'Samuel Roberts Noble Foundation'), ('University of Oklahoma', 'University of Oklahoma'), ('University of Tulsa', 'University of Tulsa'), ('Other', 'Other please specify')], max_length=80, verbose_name='Participant Institution')),
                ('other_institution', models.CharField(blank=True, max_length=80, null=True, verbose_name='If other, please specify')),
                ('position', models.CharField(choices=[('Community College Faculty', 'Community College Faculty'), ('Doctoral Student', 'Doctoral Student'), ('EPSCoR Staff', 'EPSCoR Staff'), ('Government Staff', 'Government Staff'), ('Graduate Faculty', 'Graduate Faculty'), ('Higher Education Faculty', 'Higher Education Faculty'), ('K-12 Administrator', 'K-12 Administrator'), ('K-12 Teacher', 'K-12 Teacher'), ('K-12 Student', 'K-12 Student'), ("Master's Student", "Master's Student"), ('Other Pre-College Teachers', 'Other Pre-College Teachers'), ('Post-Doctoral Researcher', 'Post-Doctoral Researcher'), ('Researcher', 'Researcher'), ('REU Participant', 'REU Participant'), ('Technical School Faculty', 'Technical School Faculty'), ('Technical School Student', 'Technical School Student'), ('Staff - Technical', 'Staff - Technical'), ('Staff - Non-Technical', 'Staff - Non-Technical'), ('Undergraduate Faculty', 'Undergraduate Faculty'), ('Undergraduate Student', 'Undergraduate Student'), ('Other', 'Other please specify')], max_length=80, verbose_name='Participant Position')),
                ('other_position', models.CharField(blank=True, max_length=80, null=True, verbose_name='If other, please specify')),
                ('highest_degree', models.CharField(choices=[('High School', 'High School'), ('Associate', 'Associate'), ("Bachelor's", "Bachelor's"), ("Master's", "Master's"), ('Doctoral', 'Doctoral')], max_length=20, verbose_name='Highest Degree Obtained')),
                ('gender', models.CharField(choices=[('Female', 'Female'), ('Male', 'Male'), ('NR', 'Prefer not to respond')], max_length=20, verbose_name='Gender')),
                ('ethnicity', models.CharField(choices=[('Hispanic/Latino', 'Hispanic/Latino'), ('Not Hispanic/Latino', 'Not Hispanic/Latino'), ('NR', 'Prefer not to respond')], max_length=20, verbose_name='Ethnicity')),
                ('citizenship', models.CharField(choices=[('US Citizen', 'US Citizen'), ('Permanent Resident', 'Permanent Resident'), ('Non-Us Citizen', 'Non-Us Citizen'), ('NR', 'Prefer not to respond')], max_length=30, verbose_name='Citizenship')),
                ('race', models.CharField(choices=[('American Indian or Alaskan Native', 'American Indian or Alaskan Native'), ('Asian', 'Asian'), ('Black or African American ', 'Black or African American '), ('Native Hawaiian or Pacific Islander', 'Native Hawaiian or Pacific Islander'), ('White', 'White'), ('Prefer not to respond', 'Prefer not to respond'), ('Other', 'Other (please specify)')], max_length=50, verbose_name='Race')),
                ('other_race', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify')),
                ('disability', models.CharField(choices=[('Hearing Impairment', 'Hearing Impairment'), ('Mobility/Orthopedic impairment', 'Mobility/Orthopedic impairment'), ('Visual Impairment', 'Visual Impairment'), ('None', 'None'), ('Prefer not to respond', 'Prefer not to respond'), ('Other', 'Other (please specify)')], max_length=50, verbose_name='Disability')),
                ('other_disability', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify')),
                ('parents_degree', models.CharField(choices=[('Neither', 'Neither my mother or father (neither of my guardians)'), ('Both', 'Both my mother and father (both my guardians)'), ('Father', 'Only my father (male guardian)'), ('Mother', 'Only my mother (female guardian)'), ("Don't know", 'I do not know'), ('NR', 'Prefer not to respond')], max_length=80, verbose_name='In your family, which of your parents/guardians received college degrees?')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ItemDonor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=160, null=True)),
                ('link', models.CharField(blank=True, max_length=300, null=True)),
                ('logo', models.ImageField(null=True, upload_to='gisday/item_donors/')),
            ],
        ),
        migrations.CreateModel(
            name='OverviewContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PosterCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=160, null=True)),
                ('contact_person_name', models.CharField(blank=True, max_length=160, null=True)),
                ('contact_person_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('contact_person_mail', models.CharField(blank=True, max_length=160, null=True)),
                ('link', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SponsorCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('min_inversion', models.IntegerField()),
                ('max_inversion', models.IntegerField()),
                ('logo', models.ImageField(null=True, upload_to='gisday/sponsors/')),
            ],
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('registration_closed', models.BooleanField(default=False)),
                ('address', models.CharField(blank=True, max_length=300, null=True)),
                ('hidden', models.BooleanField(default=False)),
                ('time_ini', models.TimeField()),
                ('time_end', models.TimeField()),
                ('summary_hidden', models.BooleanField(default=True)),
                ('agenda_hidden', models.BooleanField(default=True)),
                ('photo_contest_hidden', models.BooleanField(default=True)),
                ('poster_contest_hidden', models.BooleanField(default=True)),
                ('image_gallery_hidden', models.BooleanField(default=True)),
                ('photo_gallery_hidden', models.BooleanField(default=True)),
                ('facebook_link', models.CharField(blank=True, max_length=300, null=True)),
                ('twitter_link', models.CharField(blank=True, max_length=300, null=True)),
                ('survey_open', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('demographicsurvey_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gisday.DemographicSurvey')),
                ('participate_again', models.BooleanField(verbose_name='I would like to participate in the event again')),
                ('role', models.CharField(choices=[('Organizing Committee', 'Organizing Committee'), ('Faculty Poster Judge', 'Faculty Poster Judge'), ('Student Poster Contestant', 'Student Poster Contestant'), ('Booth Exhibitor', 'Booth Exhibitor'), ('Poster Exhibitor', 'Poster Exhibitor'), ('Student Facilitator/Volunteer', 'Student Facilitator/Volunteer'), ('Staff Facilitator', 'Staff Facilitator'), ('Other', 'Other (please specify)')], max_length=50, verbose_name='What was you primary role in the event?')),
                ('other_role', models.CharField(blank=True, max_length=80, null=True, verbose_name='If other, please specify')),
                ('beneficial_aspects', models.TextField(verbose_name='What was the most beneficial or interesting aspect of the event?')),
                ('comments_and_suggestions', models.TextField(blank=True, null=True, verbose_name='Please provide any additional comments or suggestions:')),
            ],
            bases=('gisday.demographicsurvey',),
        ),
        migrations.CreateModel(
            name='PhotoContestParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last name')),
                ('first_name', models.CharField(max_length=50, verbose_name='First name')),
                ('email', models.EmailField(max_length=60, verbose_name='email')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Questions & comments')),
                ('validated', models.BooleanField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
        ),
        migrations.CreateModel(
            name='PersonInGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('highlight', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvsgInGroup', to='gisday.AboutUsGroup')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvsgInPerson', to='gisday.AboutUsPerson')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
        ),
        migrations.CreateModel(
            name='OverviewImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='gisday/overview/')),
                ('order', models.IntegerField()),
                ('title', models.CharField(blank=True, max_length=300, null=True)),
                ('description', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'unique_together': {('order',)},
            },
        ),
        migrations.CreateModel(
            name='ItemInYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=160, null=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('link', models.CharField(blank=True, max_length=160, null=True)),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.ItemDonor')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
        ),
        migrations.CreateModel(
            name='GisDayPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(null=True, upload_to='gisday/gallery/')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
        ),
        migrations.AddField(
            model_name='demographicsurvey',
            name='year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year'),
        ),
        migrations.CreateModel(
            name='VisitorRegistrationContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_message', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_recipients', models.CharField(default='gisday@ou.edu', max_length=600)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=30)),
                ('institution', models.CharField(max_length=100)),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Questions & comments')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('validated', models.BooleanField()),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year', 'email')},
            },
        ),
        migrations.CreateModel(
            name='SurveyContents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='SummaryContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='SponsorsContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='SponsorInYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.IntegerField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categoryOfSponsorInYear', to='gisday.SponsorCategory')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Sponsor')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('sponsor', 'year')},
            },
        ),
        migrations.CreateModel(
            name='PosterContestContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_message', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_recipients', models.CharField(default='gisday@ou.edu', max_length=600)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='Poster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=128)),
                ('department', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('authors', models.TextField(blank=True, null=True, verbose_name='Poster author list')),
                ('abstract', models.TextField(verbose_name='Poster abstract')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Questions & comments')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('validated', models.BooleanField()),
                ('preview', models.FileField(blank=True, max_length=300, null=True, upload_to='gisday/posters/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.PosterCategory')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year', 'email')},
            },
        ),
        migrations.CreateModel(
            name='PhotoContestContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='LogisticsContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='CommitteeContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='BoothContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('max_booths', models.PositiveIntegerField(default=30)),
                ('registration_message_non_profit', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_message_profit', tinymce.models.HTMLField(blank=True, null=True)),
                ('registration_recipients', models.CharField(default='gisday@ou.edu', max_length=600)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year',)},
            },
        ),
        migrations.CreateModel(
            name='Booth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('non_profit', models.BooleanField()),
                ('institution', models.CharField(max_length=128)),
                ('department', models.CharField(max_length=128)),
                ('last_name', models.CharField(max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('address_1', models.CharField(max_length=128)),
                ('address_2', models.CharField(blank=True, max_length=128, null=True)),
                ('city', models.CharField(max_length=30)),
                ('state', models.CharField(max_length=30)),
                ('zipcode', models.CharField(max_length=30)),
                ('phone', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=60)),
                ('names', models.TextField(blank=True, null=True, verbose_name='Aditional atendees')),
                ('permits', models.CharField(blank=True, max_length=128, null=True, verbose_name='No. of parking permits needed')),
                ('oversized', models.NullBooleanField(verbose_name='Do you have a oversized exhibit or display?')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Questions & comments')),
                ('tshirt_size_1', models.CharField(choices=[('UK', 'Unkown'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('2XL', 'Extra Extra Large')], max_length=3)),
                ('tshirt_size_2', models.CharField(choices=[('UK', 'Unkown'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('2XL', 'Extra Extra Large')], max_length=3)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('validated', models.BooleanField()),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year', 'institution', 'department')},
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField()),
                ('entry_name', models.CharField(blank=True, max_length=100, null=True)),
                ('content', tinymce.models.HTMLField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='gisday/announcements/')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year', 'position')},
            },
        ),
        migrations.CreateModel(
            name='Agenda',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_name', models.CharField(blank=True, max_length=100, null=True)),
                ('time_ini', models.TimeField()),
                ('time_end', models.TimeField(blank=True, null=True)),
                ('speaker', models.CharField(blank=True, max_length=160, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gisday.Year')),
            ],
            options={
                'unique_together': {('year', 'entry_name')},
            },
        ),
    ]
